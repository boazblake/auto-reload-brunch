// Generated by CoffeeScript 1.6.3
var AutoReloader, WebSocketServer, isCss, isWorker, sysPath,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sysPath = require('path');

WebSocketServer = (require('ws')).Server;

isWorker = require('cluster').isWorker;

isCss = function(file) {
  return sysPath.extname(file.path) === '.css';
};

module.exports = AutoReloader = (function() {
  AutoReloader.prototype.brunchPlugin = true;

  function AutoReloader(config) {
    var cfg, _ref, _ref1, _ref2, _ref3, _ref4,
      _this = this;
    this.config = config;
    if (this.config.autoReload) {
      console.warn('Warning: config.autoReload is deprecated, please move it to config.plugins.autoReload');
    }
    cfg = (_ref = (_ref1 = (_ref2 = this.config.plugins) != null ? _ref2.autoReload : void 0) != null ? _ref1 : this.config.autoReload) != null ? _ref : {};
    if (this.config.persistent) {
      this.enabled = (_ref3 = cfg.enabled) != null ? _ref3 : true;
    }
    this.connections = [];
    this.port = (_ref4 = cfg.port) != null ? _ref4 : 9485;
    if (this.enabled && !isWorker) {
      this.server = new WebSocketServer({
        host: '0.0.0.0',
        port: this.port
      });
      this.server.on('connection', function(connection) {
        _this.connections.push(connection);
        return connection.on('close', function() {
          return _this.connections.splice(connection, 1);
        });
      });
      this.server.on('error', function(error) {
        return console.error('AutoReload ' + (error.toString().match(/EADDRINUSE/) ? "cannot start because port " + port + " is in use" : error));
      });
    }
  }

  AutoReloader.prototype.onCompile = function(changedFiles) {
    var allCss, changedExts, didCompile, message,
      _this = this;
    if (!this.enabled) {
      return;
    }
    didCompile = changedFiles.length > 0;
    allCss = didCompile && changedFiles.every(isCss);
    if ('[object Object]' === toString.call(this.enabled)) {
      if (!(didCompile || this.enabled.assets)) {
        return;
      }
      if (allCss) {
        if (!this.enabled.css) {
          return;
        }
      } else if (didCompile) {
        changedExts = changedFiles.map(function(_) {
          return sysPath.extname(_.path).slice(1);
        });
        if (!Object.keys(this.enabled).some(function(_) {
          return _this.enabled[_] && __indexOf.call(changedExts, _) >= 0;
        })) {
          return;
        }
      }
    }
    message = allCss ? 'stylesheet' : 'page';
    return this.connections.filter(function(connection) {
      return connection.readyState === 1;
    }).forEach(function(connection) {
      return connection.send(message);
    });
  };

  AutoReloader.prototype.include = function() {
    if (this.enabled) {
      return [sysPath.join(__dirname, '..', 'vendor', 'auto-reload.js')];
    } else {
      return [];
    }
  };

  AutoReloader.prototype.teardown = function() {
    var _ref;
    return (_ref = this.server) != null ? _ref.close() : void 0;
  };

  AutoReloader.prototype.type = 'javascript';

  AutoReloader.prototype.extension = 'js';

  AutoReloader.prototype.compile = function(params, callback) {
    if (this.enabled && this.port !== 9485 && 'auto-reload.js' === sysPath.basename(params.path)) {
      params.data = params.data.replace(9485, this.port);
    }
    return callback(null, params);
  };

  return AutoReloader;

})();
